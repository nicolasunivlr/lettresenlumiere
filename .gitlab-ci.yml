stages:
  - release

variables:
  RELEASE_BUILD_DIR: "release_payload"
  # Le nom de l'archive est défini ici pour être accessible par les deux jobs.
  # CI_PROJECT_NAME et CI_COMMIT_TAG sont des variables prédéfinies par GitLab.
  ARCHIVE_FILENAME: "${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.zip"

build_and_archive_job:
  stage: release
  image: node:20
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends zip php-cli php-zip php-xml php-mbstring composer git
    - echo "Vérification des installations..."
    - php -v
    - composer --version
    - node -v
    - npm -v
    - git --version
    - zip --version
  script:
    - echo "Starting build and archive process for tag $CI_COMMIT_TAG on project $CI_PROJECT_NAME"

    # 1. Nettoyer et créer le répertoire de build temporaire
    - echo "[1/5] Preparing build directory..."
    - rm -rf "$RELEASE_BUILD_DIR"
    - mkdir -p "$RELEASE_BUILD_DIR"

    # 2. Exporter les fichiers du projet (suivis par Git) dans le répertoire temporaire
    - echo "[2/5] Exporting project files..."
    - git archive HEAD | tar -x -C "$RELEASE_BUILD_DIR"

    # 3. Installer les dépendances Composer (mode production)
    - |
      if [ -f "$RELEASE_BUILD_DIR/composer.json" ]; then
        echo "[3/5] Installing Composer dependencies..."
        APP_ENV=prod composer install --no-dev --optimize-autoloader --working-dir="$RELEASE_BUILD_DIR"
      else
        echo "[3/5] composer.json not found. Skipping Composer dependencies."
      fi

    # 4. Installer les dépendances NPM et builder les assets front
    - |
      if [ -f "$RELEASE_BUILD_DIR/package.json" ]; then
        echo "[4/5] Installing NPM dependencies and building assets..."
        CURRENT_JOB_DIR=$(pwd)
        cd "$RELEASE_BUILD_DIR"
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi
        npm run build
        cd "$CURRENT_JOB_DIR"
      else
        echo "[4/5] package.json not found. Skipping NPM dependencies and asset build."
      fi

    # 5. Créer l'archive ZIP
    - echo "[5/5] Creating ZIP archive"
    - cd "$RELEASE_BUILD_DIR"
    - zip -r "../$ARCHIVE_FILENAME" . -x ".git/*" ".github/*"
    - cd ..

  artifacts:
    paths:
      - $ARCHIVE_FILENAME
    expire_in: '1 hour' # L'artefact est nécessaire pour le job suivant, puis peut expirer.
    # Ou 'never' si vous voulez le conserver plus longtemps pour ce job.
  only:
    - tags

publish_release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/cli:latest # Image Alpine avec glab
  needs:
    - job: build_and_archive_job # Dépend du job précédent et récupère ses artefacts
      artifacts: true
  before_script:
    - glab --version # Vérifier que glab est disponible
  script:
    - echo "Starting GitLab Release creation process..."
    # L'ARCHIVE_FILENAME est disponible car il a été créé par build_and_archive_job
    # et son nom est défini dans les variables globales du pipeline.
    # L'artefact lui-même est téléchargé grâce à 'needs:artifacts:true'.
    - ls -la # Vérifier que l'archive est présente

    - RELEASE_NAME="Release $CI_COMMIT_TAG"
    - RELEASE_DESCRIPTION="Automated release for $CI_PROJECT_NAME version $CI_COMMIT_TAG. Includes application code, vendor dependencies, and built frontend assets."

    - |
      echo "Creating GitLab Release $RELEASE_NAME for tag $CI_COMMIT_TAG and uploading $ARCHIVE_FILENAME..."
      glab release create "$CI_COMMIT_TAG" "$ARCHIVE_FILENAME" \
        --name "$RELEASE_NAME" \
        --notes "$RELEASE_DESCRIPTION"
      echo "GitLab Release created successfully with glab."
  only:
    - tags
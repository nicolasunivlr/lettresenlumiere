stages:
  - release

# L'image globale peut rester node:18 si d'autres jobs l'utilisent,
# ou être supprimée si ce job est le seul.
# Nous spécifierons l'image au niveau du job create_release_zip.
image: node:18

create_release_zip:
  stage: release
  # Utiliser l'image officielle GitLab CLI qui contient glab
  image: registry.gitlab.com/gitlab-org/cli:latest
  before_script:
    - apk update
    # Installer les dépendances pour la construction de l'application et de l'archive.
    # git et glab sont déjà dans l'image de base.
    - apk add --no-cache zip nodejs-current npm php82 php82-cli php82-zip php82-xml php82-mbstring php82-composer
    # Vérification des versions (optionnel, utile pour le débogage)
    - php -v || echo 'PHP (php82) not found'
    - composer --version || echo 'Composer not found'
    - node -v || echo 'Node not found'
    - npm -v || echo 'NPM not found'
    - git --version || echo 'Git not found'
    - glab --version || echo 'glab not found'
  script:
    - echo "Starting release process for tag $CI_COMMIT_TAG on project $CI_PROJECT_NAME"

    # Définition des noms
    - RELEASE_BUILD_DIR="release_payload"
    - ARCHIVE_FILENAME="${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.zip"

    # 1. Nettoyer et créer le répertoire de build temporaire
    - echo "[1/6] Preparing build directory..."
    - rm -rf "$RELEASE_BUILD_DIR"
    - mkdir -p "$RELEASE_BUILD_DIR"

    # 2. Exporter les fichiers du projet (suivis par Git) dans le répertoire temporaire
    - echo "[2/6] Exporting project files..."
    - git archive HEAD | tar -x -C "$RELEASE_BUILD_DIR"

    # 3. Installer les dépendances Composer (mode production)
    - |
      if [ -f "$RELEASE_BUILD_DIR/composer.json" ]; then
        echo "[3/6] Installing Composer dependencies..."
        # APP_ENV=prod est important pour les scripts post-install de Symfony, par exemple.
        APP_ENV=prod composer install --no-dev --optimize-autoloader --working-dir="$RELEASE_BUILD_DIR"
      else
        echo "[3/6] composer.json not found. Skipping Composer dependencies."
      fi

    # 4. Installer les dépendances NPM et builder les assets front
    - |
      if [ -f "$RELEASE_BUILD_DIR/package.json" ]; then
        echo "[4/6] Installing NPM dependencies and building assets..."
        CURRENT_JOB_DIR=$(pwd)
        cd "$RELEASE_BUILD_DIR"
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi
        npm run build # Assurez-vous que ce script existe dans votre package.json
        cd "$CURRENT_JOB_DIR"
      else
        echo "[4/6] package.json not found. Skipping NPM dependencies and asset build."
      fi

    # 5. Créer l'archive ZIP
    - echo "[5/6] Creating ZIP archive"
    - cd "$RELEASE_BUILD_DIR"
    - zip -r "../$ARCHIVE_FILENAME" . -x ".git/*" ".github/*"
    - cd .. # Revenir au répertoire racine du job

    # 6. Créer la Release GitLab en utilisant glab et attacher l'archive
    - echo "[6/6] Creating GitLab Release and uploading archive $ARCHIVE_FILENAME..."
    - RELEASE_NAME="Release $CI_COMMIT_TAG"
    - RELEASE_DESCRIPTION="Automated release for $CI_PROJECT_NAME version $CI_COMMIT_TAG. Includes application code, vendor dependencies, and built frontend assets."
    # La commande glab va utiliser CI_JOB_TOKEN pour s'authentifier.
    # Elle va créer une release pour le tag $CI_COMMIT_TAG et y attacher le fichier $ARCHIVE_FILENAME.
    - |
      glab release create "$CI_COMMIT_TAG" "$ARCHIVE_FILENAME" \
        --name "$RELEASE_NAME" \
        --notes "$RELEASE_DESCRIPTION"
      echo "GitLab Release created successfully with glab."

  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_TAG-artifacts"
    paths:
      - $ARCHIVE_FILENAME # Conserver l'archive comme artefact du job
    expire_in: 'never'

  # La section 'release:' est supprimée car glab s'en charge.

  only:
    - tags # Ce job ne s'exécute que pour les tags Git